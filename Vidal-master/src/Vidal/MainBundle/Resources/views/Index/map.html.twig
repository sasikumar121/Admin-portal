{% extends 'VidalMainBundle::layout.html.twig' %}


{% block title %}
    <h1>КАРТА АПТЕК</h1>
{% endblock %}


{% block content %}
	<div class="anons">Выберите ближайшую к Вам аптеку</div>

    <div class="iption">
        <select class="select">
            {% for city in cities %}
                <option value="{{ city.id }}" {{ thisCity.id ==  city.id ? 'selected="selected"' : ''}}>{{ city.title }}</option>
            {% endfor %}
        </select>
    </div>
    <br/>
    <br/>
    <div class="map" id="map"></div>
{% endblock %}


{% block stylesheets %}
    {{ parent() }}
    <style type="text/css">
        #map{
            width: 520px;
            height: 400px
        }
    </style>
{% endblock %}


{% block javascripts %}
    {{ parent() }}
    <script src="http://api-maps.yandex.ru/2.0-stable/?load=package.full&lang=ru-RU" type="text/javascript"></script>
    <!-- Класс множественного геокодирования -->
    <script src="http://dimik.github.io/ymaps/examples/multi-geocoder/multi-geocoder.js" type="text/javascript"></script>
    <script src="http://dimik.github.io/ymaps/examples/multi-geocoder/list-collection.js" type="text/javascript"></script>

    {#<script type="text/javascript">#}
    {#ymaps.ready(init);#}
    {#var myMap,#}
    {#myPlacemark;#}

    {#function init(){#}
    {#myMap = new ymaps.Map ("map", {#}
    {#center: [55.76, 37.64],#}
    {#zoom: 10,#}
    {#behaviors: ['default', 'scrollZoom']#}
    {#},{#}
    {#draggable: true, // метку можно перемещать#}
    {#preset: 'twirl#whiteStretchyIcon'#}
    {#});#}


    {#myMap.controls.add( new ymaps.control.ZoomControl());#}
    {#myMap.controls.add('typeSelector');#}


    {#var myCoord = [ymaps.geolocation.latitude, ymaps.geolocation.longitude];#}

    {#var mGeocoder = new MultiGeocoder({ boundedBy : myMap.getBounds() });#}

    {#// Геокодирование массива адресов и координат.#}
    {#mGeocoder.geocode(myCoord,[#}
    {#"Аптека",#}
    {#],{ results: 100 })#}
    {#.then(function (res) {#}
    {#// Асинхронно получаем коллекцию найденных геообъектов.#}
    {#myMap.geoObjects.add(res.geoObjects);#}
    {#},#}
    {#function (err) {#}
    {#console.log(err);#}
    {#});#}

    {#}#}
    {#</script>#}
    <script type="text/javascript">

    ymaps.ready(init);
    var myMap;


    function init(){
        myMap = new ymaps.Map ("map", {
            center: [{{ thisCity.latitude }}, {{ thisCity.longitude }}],
            zoom: {{ thisCity.zoom }}        });

        // myMap.behaviors.enable('scrollZoom');


        searchControl = new ymaps.control.SearchControl({
            provider: 'yandex#map',
            noPopup: false,
            useMapBounds: true
        });
        var placemarks={};
        var clusterer = new ymaps.Clusterer({
            // clusterDisableClickZoom: false
            // clusterBalloonContentBodyLayout: "cluster#balloonCarouselContent"
        });

        var geoObjects = [];

        // function addPlacemark(id, name, latitude, longitude, address, metro, phone, schedule, branchId) {
        function addPlacemark(id, latitude, longitude) {

            var balloon = '';

            var placemark = new ymaps.Placemark([latitude, longitude], {
                // content: name,
                balloonContent: 'Загрузка...',
                hasBalloon: true,
                drugStoreId: id,
                hintContent: 'Загрузка...'
            }, {
                preset: 'twirl#hospitalIcon',
                iconImageHref: '{{ asset('bundles/vidalmain/images/apt.png') }}',
                iconImageSize: [20, 20],
                iconImageOffset: [-10, -10]
            });

            // myMap.geoObjects.add(placemark);

            clusterer.add(placemark);
            placemarks[id]=placemark;
        }

        var layer = new ymaps.Layer('', {zIndex: 0});
        myMap.layers.add(layer);

        var projection = myMap.options.get('projection');

        var xhr = null;

        var cachedTiles = {};
        var addedStores = {};

        function loadDrugStores() {

            var zoom = myMap.getZoom();

            var globalPixelPoint = projection.toGlobalPixels(myMap.getBounds()[0], zoom);
            var clientPixelPoint = layer.toClientPixels(globalPixelPoint);
            var leftTopTile = layer.clientPixelsToNumber(clientPixelPoint, zoom);

            // console.log(clientPixelPoint);
            // console.log(layer.fromClientPixels(layer.numberToClientBounds(leftTopTile, zoom)[0], zoom));
            // console.log(projection.fromGlobalPixels((globalPixelPoint), zoom));

            var globalPixelPoint = projection.toGlobalPixels(myMap.getBounds()[1], zoom);
            var clientPixelPoint = layer.toClientPixels(globalPixelPoint);
            var rightBottomTile = layer.clientPixelsToNumber(clientPixelPoint, zoom);
            // console.log(rightBottomTile);

            var countTiles = 0;
            var tiles = {};
            for(var i = leftTopTile[0]; i < rightBottomTile[0] + 1; i++) {
                for(var j = rightBottomTile[1]; j<leftTopTile[1] + 1; j++) {

                    var tileKey = zoom + ':' + i + ':' + j;

                    if (typeof cachedTiles[tileKey] !== 'undefined') continue;

                    var tileNumber = [i, j];

                    var clientBounds = layer.numberToClientBounds(tileNumber, zoom);
                    var globalBounds = [
                        layer.fromClientPixels(clientBounds[0], zoom),
                        layer.fromClientPixels(clientBounds[1], zoom)
                    ];

                    var geoBounds = [
                        projection.fromGlobalPixels(globalBounds[0], zoom),
                        projection.fromGlobalPixels(globalBounds[1], zoom)
                    ];

                    tiles[tileKey] = {
                        bounds: geoBounds,
                        number: tileNumber
                    }
                    countTiles++;
                    cachedTiles[tileKey] = 1;

                }
            }

            if (countTiles <= 0) return;

            if(xhr && xhr.readyState != 4){
                xhr.abort();
            }
            xhr = $.post('{{ path('pharmacies_map_ajax',{ cityId : thisCity.id }) }}', tiles, function(stores) {
                stores = JSON.parse(stores);
//                console.log(stores);
                $.each(stores, function(index, store) {
                    if (addedStores['store_id_' + store.id] === 1) return;
                    addedStores['store_id_' + store.id] = 1;
                    addPlacemark(
                            store.id,
                            store.Latitude,
                            store.Longitude
                    );
                });
            });

        }

        myMap.events.add('boundschange', function (e) {
            loadDrugStores();
        });

        myMap.events.add('balloonopen', function (e) {
            var geoObjectProperties = e.get('balloon').getData().geoObject.properties;
            if (geoObjectProperties.get('balloonContentLoaded')) return;
            var drugStoreId = geoObjectProperties.get('drugStoreId');

            $.post(Routing.generate('getMapBalloonContent',{ 'id' : drugStoreId }), function(balloon) {
                geoObjectProperties.set('balloonContent', balloon);
                geoObjectProperties.set('balloonContentLoaded', true);
            });


        });

        myMap.events.add('hintshow', function (e) {
            var geoObjectProperties = e.get('hint').getData().geoObject.properties;
            if (geoObjectProperties.get('hintContentLoaded')) return;
            var drugStoreId = geoObjectProperties.get('drugStoreId');

            $.post(Routing.generate('getMapHintContent',{ 'id' : drugStoreId }), function(balloon) {
                geoObjectProperties.set('hintContent', balloon);
                geoObjectProperties.set('hintContentLoaded', true);
            });
        });

        function enableScrollZoom() {
            myMap.behaviors.enable('scrollZoom');
            myMap.events.remove('click', enableScrollZoom);
        }

        myMap.events.add('click', enableScrollZoom);

        loadDrugStores();


        /*
         // Зададим шаблон URL, по которому будут доступны данные для тайла на сервере
         var hotspotUrl = '/_action/DrugStore2/getMapTile/%z-%x-%y',

         // Зададим шаблон jsonp-callback
         myCallback = 'hotspot_callback', // вместо '%c' API выполнит подстановку 'x=<номер тайла по x>&y=<номер тайла по y>&z=<коэффициент масштабирования>'

         // Создадим источник тайлов
         objSource = new ymaps.hotspot.ObjectSource(hotspotUrl, myCallback, {
         noCash: true // не использовать кеш браузера
         });


         var layer = new ymaps.Layer('', {
         zIndex: 0,
         });
         myMap.layers.add(layer);
         objSource.getTileUrl = function (tileNumber, zoom) {
         // var point = myMap.tileCoordinates.toPixels(tileNumber, [0, 0], zoom);

         // console.log(hotspotLayer.numberToClientBounds(tileNumber, zoom));
         console.log(layer.numberToClientBounds(tileNumber, zoom));
         return '/_action/DrugStore/getMapTile/';
         // return ymaps.hotspot.ObjectSource.prototype.call(this, tileNumber, zoom);
         };

         var hotspotLayer = new ymaps.hotspot.Layer(objSource, {
         hasBalloon: false // у слоя не будет создано поле balloon
         });

         myMap.layers.add(hotspotLayer);
         */




        /*
         $.each(drugStores, function(index, store) {
         // console.log(store);

         var placemark = new ymaps.Placemark([store.Latitude, store.Longitude], {
         content: store.name,
         balloonContent: store.balloon,
         hasBalloon: true,
         hintContent: store.name
         }, {
         preset: 'twirl#hospitalIcon',
         iconImageHref: '/favicon.ico',
         iconImageSize: [16, 16],
         iconImageOffset: [-8, -8]

         });

         // myMap.geoObjects.add(placemark);

         geoObjects.push(placemark);

         });
         */
        // console.log(geoObjects);

        clusterer.add(geoObjects);

        myMap.geoObjects.add(clusterer);
        // myMap.geoObjects.add(clusterer);

        myMap.controls.add(new ymaps.control.ZoomControl());

// добавляем панель на карту в нужную позицию
        myMap.controls.add(searchControl, { left: '40px', top: '10px' });

        jQuery(function($) {
            $(".region-drug-stores,.item-related_points").on("click", "a.change_coordinates", function(e){

                var coordinates = $(this).data("coordinates").split(",");
                var xCoords = parseFloat(coordinates[0]);
                var yCoords = parseFloat(coordinates[1]);
                var id = $(this).attr("value");
                myMap.panTo(
                        [xCoords, yCoords], {
                            checkZoomRange : true,
                            flying: true,
                            callback: function (e) {
                                var zoom = myMap.getZoom();
                                if (zoom<15) {
                                    zoom=15;
                                    myMap.setZoom(zoom, {duration: 1000})
                                }
                                mark=placemarks[id];
                                if (mark && mark.getMap()) {
                                    mark.balloon.open();
                                } else {
                                    var clustererListener = clusterer.events.group()
                                            .add('add',function(e) {
                                                mark=placemarks[id];
                                                if (mark && mark.getMap()) {
                                                    mark.balloon.open();
                                                    clustererListener.removeAll();
                                                }
                                            })
                                }
                            }
                        }
                )


                var elem = $(this).attr("href"),
                        destination = $(elem).offset().top;
                $("html:not(:animated),body:not(:animated)").animate({scrollTop: destination}, 1000, 'swing');

                return false;
            });
        })
    }

    jQuery(function($) {

        $('.search_box.search_box-pharmacy').submit(function(e) {
            e.preventDefault();
            $('.ymaps-b-search__button .ymaps-b-form-button__text').click();
        });

        $('#choiceField').keyup(function() {
            $('.ymaps-b-form-input__input').val($(this).val());
        });

    });


    $(document).ready(function(){
        $('select').chosen({
            disable_search: true,
            no_results_text: "не найдено"
        });

        $('.select').change(function(){
            url = Routing.generate('pharmacies_map', { 'id': $(this).val() });
            window.location.href = url;
        });

    });
    </script>
{% endblock %}